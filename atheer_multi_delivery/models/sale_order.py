# -*- coding: utf-8 -*-
from odoo import fields, models
from odoo.tools import float_compare


class SaleOrderLine(models.Model):
    _inherit = 'sale.order.line'

    delivery_date = fields.Date(string='Delivery Date',
                                default=fields.Date.context_today, copy=False)

    def _get_procurement_group(self):
        line_proc_group = self.env['procurement.group'].search([]).filtered(
            lambda x: self.delivery_date == x.delivery_date and x.sale_id.id == self.order_id.id)
        if line_proc_group:
            return line_proc_group
        return False

    def _prepare_procurement_group_vals(self):
        res = super(SaleOrderLine, self)._prepare_procurement_group_vals()
        res.update({'delivery_date': self.delivery_date})
        return res

    def _action_launch_stock_rule(self, previous_product_uom_qty=False):
        """
        Launch procurement group run method with required/custom fields generated by a
        sale order line. procurement group will launch '_run_pull', '_run_buy' or '_run_manufacture'
        depending on the sale order line product rule.
        """
        if self._context.get("skip_procurement"):
            return True
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')

        delivery_dates = self.mapped('delivery_date')
        for dt in list(set(delivery_dates)):
            lines = self.filtered(lambda x: x.delivery_date == dt)
            for line in lines:
                procurements = []
                line = line.with_company(line.company_id)
                if line.state != 'sale' or not line.product_id.type in ('consu', 'product'):
                    continue
                qty = line._get_qty_procurement(previous_product_uom_qty)
                if float_compare(qty, line.product_uom_qty, precision_digits=precision) == 0:
                    continue

                group_id = line._get_procurement_group()
                if not group_id:
                    group_id = self.env['procurement.group'].create(line._prepare_procurement_group_vals())
                    line.order_id.procurement_group_id = group_id
                else:
                    # In case the procurement group is already created and the order was
                    # cancelled, we need to update certain values of the group.
                    updated_vals = {}
                    if group_id.partner_id != line.order_id.partner_shipping_id:
                        updated_vals.update({'partner_id': line.order_id.partner_shipping_id.id})
                    if group_id.move_type != line.order_id.picking_policy:
                        updated_vals.update({'move_type': line.order_id.picking_policy})
                    if updated_vals:
                        group_id.write(updated_vals)

                values = line._prepare_procurement_values(group_id=group_id)
                product_qty = line.product_uom_qty - qty
                line_uom = line.product_uom
                quant_uom = line.product_id.uom_id
                product_qty, procurement_uom = line_uom._adjust_uom_quantities(product_qty, quant_uom)
                procurements.append(self.env['procurement.group'].Procurement(
                    line.product_id, product_qty, procurement_uom,
                    line.order_id.partner_shipping_id.property_stock_customer,
                    line.product_id.display_name, line.order_id.name, line.order_id.company_id, values))
                if procurements:
                    procurement_group = self.env['procurement.group']
                    if self.env.context.get('import_file'):
                        procurement_group = procurement_group.with_context(import_file=False)
                    procurement_group.run(procurements)

                # This next block is currently needed only because the scheduler trigger is done by picking confirmation rather than stock.move confirmation
        orders = self.mapped('order_id')
        for order in orders:
            pickings_to_confirm = order.picking_ids.filtered(lambda p: p.state not in ['cancel', 'done'])
            if pickings_to_confirm:
                # Trigger the Scheduler for Pickings
                count = 0
                for picking in pickings_to_confirm.sorted(key='id', reverse=False):
                    delivery_date = list(set(delivery_dates))[count]
                    picking.write({'scheduled_date': delivery_date,
                                   'date_deadline': delivery_date})
                    count += 1
                pickings_to_confirm.action_confirm()
        return True